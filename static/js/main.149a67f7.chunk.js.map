{"version":3,"sources":["listItem.js","head.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","head","React","Component","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAsBeA,MAnBf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC1DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAEzC,8BAAM,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAW,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAK3G,OACI,6BACKL,ICTEiB,G,6KALP,OACI,iD,GAHOC,IAAMC,Y,eCIzBC,IAAQC,IAAIC,K,IAkFGC,E,kDA9Eb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IAEDyB,MAAM,CACTvB,MAAM,GACNwB,YAAY,CACVhB,KAAK,GACLJ,IAAI,KAGR,EAAKqB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKf,UAAY,EAAKA,UAAUe,KAAf,gBAbD,E,wDAeNhB,GACVkB,KAAKC,SAAS,CACZL,YAAY,CACVhB,KAAME,EAAEE,OAAOL,MACfH,IAAI0B,KAAKC,W,8BAKPrB,GACNA,EAAEsB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAgB,KAAZS,EAAe,CACjB,IAAMC,EAAS,GAAD,mBAAMN,KAAKL,MAAMvB,OAAjB,CAAwBiC,IACtCL,KAAKC,SAAS,CACZ7B,MAAOkC,EACPV,YAAY,CACVhB,KAAK,GACLJ,IAAI,S,iCAKDA,GACT,IAAM+B,EAAgBP,KAAKL,MAAMvB,MAAMoC,QAAO,SAAAlC,GAAI,OAChDA,EAAKE,MAAQA,KACbwB,KAAKC,SAAS,CACZ7B,MAAMmC,M,gCAIF3B,EAAMJ,GACd,IAAMJ,EAAQ4B,KAAKL,MAAMvB,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAGhBoB,KAAKC,SAAS,CACZ7B,MAAOA,M,+BAKT,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa+B,SAAUT,KAAKD,SACnC,2BAAOtB,KAAK,OAAOiC,YAAY,aAAa/B,MAAOqB,KAAKL,MAAMC,YAAYhB,KAC1EC,SAAUmB,KAAKH,cACf,4BAAQpB,KAAK,UAAb,cAGJ,kBAAC,EAAD,CAAWL,MAAO4B,KAAKL,MAAMvB,MAAOe,WAAca,KAAKb,WAAYJ,UAAYiB,KAAKjB,kB,GAvE5EM,IAAMC,WCGJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.149a67f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listItem.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type='text' id={item.key} value={item.text} onChange={(e) =>{\r\n                    props.setUpdate(e.target.value, item.key)\r\n                }}/>\r\n                <span><FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick ={ () => props.deleteItem(item.key)}/></span>\r\n            </p>\r\n            \r\n        </div>\r\n    })\r\n    return(\r\n        <div>\r\n            {listItems}\r\n        </div>\r\n    );\r\n}\r\nexport default ListItems;","import React from 'react';\r\nimport './head.css'\r\nclass head extends React.Component{\r\n    render(){\r\n        return(\r\n            <h2>My To-Do List</h2>\r\n        );\r\n    }\r\n}\r\nexport default head;","import React from 'react';\nimport './App.css';\nimport ListItems from './listItem';\nimport Head from './head';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash);\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem\n    if (newItem !== ''){\n      const newItems= [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key)\n      this.setState({\n        items:filteredItems\n      })\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item =>{\n      if (item.key === key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <Head />\n        <div className=\"App\"> \n          <header>\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"Enter text\" value={this.state.currentItem.text}\n              onChange={this.handleInput}/>\n              <button type=\"submit\">Add item</button>\n            </form>\n          </header>\n          <ListItems items={this.state.items} deleteItem = {this.deleteItem} setUpdate= {this.setUpdate}/>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}